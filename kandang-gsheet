#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP_Google_Sheet_Client.h>
#include <ArduinoJson.h>

#define DHTPIN 2
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
#define RELAY_KIPAS 14
#define RELAY_LAMPU 12
#define MQ135_PIN A0
#define MAX_LOGS 50
#define SENSOR_INTERVAL 10000
#define SEND_INTERVAL 300000
#define VENTILATION_INTERVAL 3600000
#define VENTILATION_DURATION 300000

LiquidCrystal_I2C lcd(0x27, 16, 2);
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 7 * 3600);
ESP8266WebServer server(80);

const char* ssid = "SSID";
const char* password = "Password";
const unsigned long waktuMasukKandang = 1742428800;

struct DeviceLog {
  String type;
  String start;
  String end;
  unsigned long duration;
};
DeviceLog logBuffer[MAX_LOGS];
int logIndex = 0;

float suhu, kelembaban, amonia;
unsigned long lampuStart = 0, kipasStart = 0, lastVentilation = 0;
int tampilanLCD = 0;

const char* spreadsheetId = "1JmoSOS-vDcWTocTzMMD03yGqywlKXwkG2AljmN3zj4k";
const String logSheet = "Logs";
const String sensorSheet = "Sensor";

#define PROJECT_ID "solid-heaven-365404"
#define CLIENT_EMAIL "gsheet@solid-heaven-365404.iam.gserviceaccount.com"
const char PRIVATE_KEY[] PROGMEM = "-----BEGIN PRIVATE KEY-----";

std::pair<float, float> getOptimalTemperature(int umur) {
  static const std::pair<float, float> tempTable[] = {{32.0,34.0},{30.0,32.0},{28.0,30.0},{26.0,28.0},{26.0,31.0}};
  return tempTable[(umur <= 7) ? 0 : (umur <= 14) ? 1 : (umur <= 21) ? 2 : (umur <= 28) ? 3 : 4];
}

std::pair<float, float> getOptimalHumidity(int umur) {
  if(umur <= 7) return {60.0, 70.0};
  else if(umur <= 14) return {55.0, 65.0};
  else return {50.0, 60.0};
}

String getFormattedDate(unsigned long epochTime) {
  time_t rawTime = epochTime;
  struct tm *timeInfo = localtime(&rawTime);
  const char* bulan[] = {"Jan","Feb","Mar","Apr","Mei","Jun","Jul","Ags","Sep","Okt","Nov","Des"};
  return String(timeInfo->tm_mday) + " " + bulan[timeInfo->tm_mon] + " " + String(timeInfo->tm_year + 1900);
}

float getAmoniaPPM() {
  return analogRead(MQ135_PIN) * (3.3/1024.0) * 10.0;
}

String formatDuration(unsigned long ms) {
  unsigned long secs = ms/1000;
  char buf[9];
  snprintf(buf, sizeof(buf), "%02lu:%02lu:%02lu", secs/3600, (secs%3600)/60, secs%60);
  return String(buf);
}

void handleDeviceEvent(String type, bool state) {
  noInterrupts();
  if(logIndex >= MAX_LOGS) {
    memmove(&logBuffer[0], &logBuffer[1], sizeof(DeviceLog)*(MAX_LOGS-1));
    logIndex = MAX_LOGS-1;
  }
  
  if(state) {
    logBuffer[logIndex] = {type, timeClient.getFormattedTime(), "", 0};
    if(type == "LAMP") lampuStart = millis();
    else kipasStart = millis();
  } else {
    logBuffer[logIndex].end = timeClient.getFormattedTime();
    logBuffer[logIndex].duration = (type == "LAMP") ? (millis()-lampuStart) : (millis()-kipasStart);
    logIndex++;
  }
  interrupts();
}

void sendLogs() {
  if (WiFi.status() == WL_CONNECTED && GSheet.ready() && logIndex > 0) {
    noInterrupts();
    FirebaseJson response;
    FirebaseJson valueRange;
    valueRange.add("majorDimension", "ROWS");
    FirebaseJsonArray values;
    
    for (int i = 0; i < logIndex; i++) {
      FirebaseJsonArray row;
      row.add(logBuffer[i].type);
      row.add(logBuffer[i].start);
      row.add(logBuffer[i].end);
      row.add(formatDuration(logBuffer[i].duration));
      values.add(row);
    }
    
    valueRange.add("values", values);
    bool success = GSheet.values.append(&response, spreadsheetId, String(logSheet + "!A1").c_str(), &valueRange);
    
    if (success) logIndex = 0;
    interrupts();
  }
}

bool bacaSensor() {
  static unsigned long lastRead = 0;
  if(millis()-lastRead >= SENSOR_INTERVAL) {
    suhu = dht.readTemperature();
    kelembaban = dht.readHumidity();
    amonia = getAmoniaPPM();
    lastRead = millis();
    return !isnan(suhu) && !isnan(kelembaban);
  }
  return false;
}

void kontrolSuhu() {
  static bool currentLampState = false;
  static bool currentFanState = false;
  
  int umur = ((timeClient.getEpochTime()-waktuMasukKandang)/86400)+1;
  auto suhuOptimal = getOptimalTemperature(umur);
  auto kelembabanOptimal = getOptimalHumidity(umur);
  int jam = timeClient.getHours();
  
  bool newLampState = currentLampState;
  bool newFanState = currentFanState;

  if(amonia >= 15) {
    newLampState = LOW;
    newFanState = HIGH;
  }
  else if(kelembaban > kelembabanOptimal.second) {
    newLampState = LOW;
    newFanState = HIGH;
  }
  else if(umur > 35) {
    bool waktuMalam = (jam >= 17 || jam < 7);
    newLampState = waktuMalam ? (suhu < suhuOptimal.first ? HIGH : LOW) : LOW;
    newFanState = (suhu >= (suhuOptimal.second + 0.5)) ? HIGH : LOW;
  }
  else {
    newLampState = (suhu < suhuOptimal.first) ? HIGH : 
                   (suhu >= suhuOptimal.second) ? LOW : currentLampState;
    newFanState = (suhu >= (suhuOptimal.second + 0.5)) ? HIGH : LOW;
  }

  if(kelembaban < kelembabanOptimal.first) newFanState = LOW;

  if(newLampState != currentLampState) {
    digitalWrite(RELAY_LAMPU, newLampState);
    handleDeviceEvent("LAMP", newLampState);
    currentLampState = newLampState;
  }

  if(newFanState != currentFanState) {
    digitalWrite(RELAY_KIPAS, newFanState);
    handleDeviceEvent("FAN", newFanState);
    currentFanState = newFanState;
  }
}

void updateLCD() {
  static int lastPage = -1;
  static unsigned long lastUpdate = 0;
  
  if(millis() - lastUpdate < 2000) return;
  lastUpdate = millis();

  int currentPage = tampilanLCD % 11;
  if(currentPage == lastPage) return;
  
  lcd.clear();
  delay(2);

  int umur = ((timeClient.getEpochTime()-waktuMasukKandang)/86400)+1;
  auto suhuOptimal = getOptimalTemperature(umur);
  auto kelembabanOptimal = getOptimalHumidity(umur);
  
  switch(currentPage) {
    case 0:
      lcd.setCursor(0, 0);
      lcd.print("Tanggal:");
      lcd.setCursor(0, 1);
      lcd.print(getFormattedDate(timeClient.getEpochTime()));
      break;
    case 1:
      lcd.setCursor(0, 0);
      lcd.print("Jam:");
      lcd.setCursor(0, 1);
      lcd.print(timeClient.getFormattedTime().substring(0,8));
      break;
    case 2:
      lcd.setCursor(0, 0);
      lcd.print("Masuk Kandang:");
      lcd.setCursor(0, 1);
      lcd.print(getFormattedDate(waktuMasukKandang));
      break;
    case 3:
      lcd.setCursor(0, 0);
      lcd.print("Umur:");
      lcd.setCursor(0, 1);
      lcd.print(String(umur)+" hari");
      break;
    case 4:
      lcd.setCursor(0, 0);
      lcd.print("Suhu : " + String(suhu,2) + "\xDF" "C");
      lcd.setCursor(0, 1);
      lcd.print("Range: " + String(suhuOptimal.first,0) + "-" + String(suhuOptimal.second,0) + "\xDF" "C");
      break;
    case 5:
      lcd.setCursor(0, 0);
      lcd.print("Kelemb: " + String(kelembaban,0) + "%");
      lcd.setCursor(0, 1);
      lcd.print("Range : " + String(kelembabanOptimal.first,0) + "-" + String(kelembabanOptimal.second,0) + "%");
      break;
    case 6:
      lcd.setCursor(0, 0);
      lcd.print("Amonia:");
      lcd.setCursor(0, 1);
      lcd.print(String(amonia,2) + " ppm");
      break;
    case 7:
      lcd.setCursor(0, 0);
      lcd.print("Lampu:");
      lcd.setCursor(0, 1);
      lcd.print(digitalRead(RELAY_LAMPU)?"ON":"OFF");
      break;
    case 8:
      lcd.setCursor(0, 0);
      lcd.print("Kipas:");
      lcd.setCursor(0, 1);
      lcd.print(digitalRead(RELAY_KIPAS)?"ON":"OFF");
      break;
    case 9:
      lcd.setCursor(0, 0);
      lcd.print("Log Terakhir:");
      lcd.setCursor(0, 1);
      if(logIndex>0) {
        int showIndex = logIndex - 1;
        lcd.print(logBuffer[showIndex].start.substring(0,5) + "-" + 
                 (logBuffer[showIndex].end != "" ? logBuffer[showIndex].end.substring(0,5) : "ON"));
      } else {
        lcd.print("No logs");
      }
      break;
    case 10:
      lcd.setCursor(0, 0);
      lcd.print("IP:");
      lcd.setCursor(0, 1);
      lcd.print(WiFi.localIP().toString());
      break;
  }

  lastPage = currentPage;
  tampilanLCD++;
}

void maintainWiFi() {
  static unsigned long lastCheck = 0;
  if(millis()-lastCheck <30000) return;
  if(WiFi.status() != WL_CONNECTED) {
    WiFi.disconnect();
    WiFi.begin(ssid, password);
  }
  lastCheck = millis();
}

void updateTime() {
  static unsigned long lastUpdate = 0;
  if(millis()-lastUpdate <60000) return;
  timeClient.update();
  lastUpdate = millis();
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while(WiFi.status() != WL_CONNECTED) delay(500);
  
  timeClient.begin();
  timeClient.forceUpdate();
  dht.begin();
  lcd.init();
  lcd.backlight();
  
  pinMode(RELAY_KIPAS, OUTPUT);
  pinMode(RELAY_LAMPU, OUTPUT);
  
  GSheet.begin(CLIENT_EMAIL, PROJECT_ID, PRIVATE_KEY);

  server.on("/", []() {
    timeClient.update();
    String html = "<html><head><meta charset='UTF-8'><meta http-equiv='refresh' content='10'></head><body style='font-family:Arial'><h1>Monitoring Kandang Ayam</h1><div style='border:1px solid #ccc;padding:20px;border-radius:10px'><ol>";
    
    int umur = ((timeClient.getEpochTime()-waktuMasukKandang)/86400)+1;
    auto suhuOptimal = getOptimalTemperature(umur);
    auto kelembabanOptimal = getOptimalHumidity(umur);
    
    String items[11];
    items[0] = getFormattedDate(timeClient.getEpochTime());
    items[1] = timeClient.getFormattedTime();
    items[2] = getFormattedDate(waktuMasukKandang);
    items[3] = String(umur)+" hari";
    items[4] = String(suhu,2) + " °C (Range: "+String(suhuOptimal.first,0)+"-"+String(suhuOptimal.second,0)+" °C)";
    items[5] = String(kelembaban,0) + " % (Range: "+String(kelembabanOptimal.first,0)+"-"+String(kelembabanOptimal.second,0)+"%)";
    items[6] = String(amonia,2) + " ppm";
    items[7] = digitalRead(RELAY_LAMPU)?"ON":"OFF";
    items[8] = digitalRead(RELAY_KIPAS)?"ON":"OFF";
    
    if(logIndex>0) {
      int showIndex = (logIndex > 0) ? logIndex-1 : MAX_LOGS-1;
      items[9] = logBuffer[showIndex].start + " - " + (logBuffer[showIndex].end != "" ? logBuffer[showIndex].end : "ON");
    } else items[9] = "No logs";
    
    items[10] = WiFi.localIP().toString();
    
    const char* headers[] = {"Tanggal","Jam","Masuk Kandang","Umur","Suhu",
                            "Kelembaban","Amonia","Lampu","Kipas","Log Terakhir","IP Address"};
    
    for(int i=0;i<11;i++) html += "<li><b>"+String(headers[i])+":</b> "+items[i]+"</li>";
    html += "</ol></div></body></html>";
    server.send(200, "text/html", html);
  });
  server.begin();
}

void loop() {
  maintainWiFi();
  updateTime();
  server.handleClient();
  yield();
  
  if(bacaSensor()) kontrolSuhu();
  
  static unsigned long lastSend = 0;
  if(millis()-lastSend >= SEND_INTERVAL) {
    FirebaseJson sensorResponse;
    FirebaseJson sensorValueRange;
    
    sensorValueRange.add("majorDimension", "COLUMNS");
    sensorValueRange.set("values/[0]/[0]", getFormattedDate(timeClient.getEpochTime())+" "+timeClient.getFormattedTime());
    sensorValueRange.set("values/[1]/[0]", ((timeClient.getEpochTime()-waktuMasukKandang)/86400)+1);
    sensorValueRange.set("values/[2]/[0]", String(suhu,2).toFloat());
    sensorValueRange.set("values/[3]/[0]", String(kelembaban,2).toFloat());
    sensorValueRange.set("values/[4]/[0]", String(amonia,2).toFloat());
    sensorValueRange.set("values/[5]/[0]", digitalRead(RELAY_LAMPU) ? "ON" : "OFF");
    sensorValueRange.set("values/[6]/[0]", digitalRead(RELAY_KIPAS) ? "ON" : "OFF");
    sensorValueRange.set("values/[7]/[0]", WiFi.localIP().toString());

    GSheet.values.append(&sensorResponse, spreadsheetId, String(sensorSheet + "!A1").c_str(), &sensorValueRange);
    sendLogs();
    lastSend = millis();
  }
  
  static unsigned long lastLCD = 0;
  if(millis() - lastLCD >= 2000) {
    updateLCD();
    lastLCD = millis();
  }

  static unsigned long ventilationStart = 0;
  static bool isVentilating = false;
  if(millis() - lastVentilation > VENTILATION_INTERVAL) {
    digitalWrite(RELAY_KIPAS, HIGH);
    handleDeviceEvent("FAN", true);
    lastVentilation = millis();
    ventilationStart = millis();
    isVentilating = true;
  }
  
  if(isVentilating && (millis() - ventilationStart >= VENTILATION_DURATION)) {
    digitalWrite(RELAY_KIPAS, LOW);
    handleDeviceEvent("FAN", false);
    isVentilating = false;
  }
}
