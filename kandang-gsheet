#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP_Google_Sheet_Client.h>
#include <ArduinoJson.h>

#define DHTPIN 2
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
#define RELAY_KIPAS 14
#define RELAY_LAMPU 12
#define RELAY_HEATER 13
#define MQ135_PIN A0
#define SENSOR_INTERVAL 10000
#define SEND_INTERVAL 300000
#define VENTILATION_INTERVAL 3600000
#define VENTILATION_DURATION 300000

LiquidCrystal_I2C lcd(0x27, 16, 2);
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 7 * 3600);
ESP8266WebServer server(80);

const char* ssid = "WiFi-SSID";
const char* password = "WiFi-Password";
const unsigned long waktuMasukKandang = 1743897600;

float suhu, kelembaban, amonia;
unsigned long heaterStart = 0, heaterStop = 0, fanStart = 0, fanStop = 0, lampStart = 0, lampStop = 0;
int tampilanLCD = 0;

unsigned long lampDuration = 0;
unsigned long fanDuration = 0;
unsigned long heaterDuration = 0;

const char* spreadsheetId = "Your-spreadsheet-ID";
const String sensorSheet = "Sensor";

#define PROJECT_ID "Your project ID"
#define CLIENT_EMAIL "email service account"
const char PRIVATE_KEY[] PROGMEM = "-----BEGIN PRIVATE KEY-----/ /-----END PRIVATE KEY-----\n";

unsigned long lastVentilation = 0;

String webLogs = "";

bool lastLampState = LOW;
bool lastFanState = LOW;
bool lastHeaterState = LOW;

bool currentLampState = LOW;
bool currentFanState = LOW;
bool currentHeaterState = LOW;

std::pair<float, float> getOptimalTemperature(int umur) {
  static const std::pair<float, float> tempTable[] = {{32.0,34.0},{30.0,32.0},{28.0,30.0},{26.0,32.0},{26.0,30.0}};
  return tempTable[(umur <= 7) ? 0 : (umur <= 14) ? 1 : (umur <= 21) ? 2 : (umur <= 28) ? 3 : 4];
}

String getFormattedDate(unsigned long epochTime) {
  time_t rawTime = epochTime;
  struct tm *timeInfo = localtime(&rawTime);
  const char* bulan[] = {"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ags", "Sep", "Okt", "Nov", "Des"};
  
  char buffer[30];
  snprintf(buffer, sizeof(buffer), "%02d %s %04d", timeInfo->tm_mday, bulan[timeInfo->tm_mon], timeInfo->tm_year + 1900);
  return String(buffer);
}

float getAmoniaPPM() {
  return analogRead(MQ135_PIN) * (3.3/1024.0) * 10.0;
}

String formatDuration(unsigned long ms) {
  unsigned long secs = ms/1000;
  char buf[9];
  snprintf(buf, sizeof(buf), "%02lu:%02lu:%02lu", secs/3600, (secs%3600)/60, secs%60);
  return String(buf);
}

bool bacaSensor() {
  static unsigned long lastRead = 0;
  if (millis() - lastRead >= SENSOR_INTERVAL) {
    suhu = dht.readTemperature();
    kelembaban = dht.readHumidity();
    amonia = getAmoniaPPM();
    lastRead = millis();
    return !isnan(suhu) && !isnan(kelembaban);
  }
  return false;
}

void handleDeviceEvent(String device, bool state) {
    String status = state ? "ON" : "OFF";
    addWebLog(device + " status changed to " + status);
}

void kontrolSuhu() {
  int umur = ((timeClient.getEpochTime() - waktuMasukKandang) / 86400) + 1;
  auto suhuOptimal = getOptimalTemperature(umur);
  int jam = timeClient.getHours();

  bool newLampState = currentLampState;
  bool newFanState = currentFanState;
  bool newHeaterState = currentHeaterState;

  if (umur > 35) {
    bool waktuMalam = (jam >= 17 || jam < 7);
    if (waktuMalam) {
        newLampState = HIGH;
        if (newLampState != currentLampState) {
          digitalWrite(RELAY_LAMPU, newLampState);
          handleDeviceEvent("LAMP", newLampState);
          currentLampState = newLampState;
          addWebLog("Lampu dinyalakan waktu malam");
        }
    if (suhu < suhuOptimal.first) {
      if (newHeaterState != HIGH) {
          newHeaterState = HIGH;
          addWebLog("Heater dinyalakan karena suhu rendah.");
          if (amonia > 15 || kelembaban > 80) {
            if (newFanState != HIGH) {
                newFanState = HIGH;
                addWebLog("5. Kipas dinyalakan karena amonia > 15 atau kelembaban > 80.");
            }
        } else if (amonia < 15 && kelembaban < 70) {
            if (newFanState != LOW) {
                newFanState = LOW;
                addWebLog("5. Kipas dimatikan karena amonia < 15 dan kelembaban < 70.");
              }
            }
        }
      } else if (suhu > suhuOptimal.second) {
          if (newHeaterState != LOW) {
              newHeaterState = LOW;
              newFanState = HIGH;
              addWebLog("Heater dimatikan & Kipas dinyalakan karena suhu tinggi.");
          } else if(newHeaterState == LOW){
              if (newFanState != HIGH){
                newFanState = HIGH;
                addWebLog("Suhu tinggi heater dalam keadaan mati, kipas dinyalakan.");
              }
            }
            else if (amonia > 15 || kelembaban > 80) {
                if (newFanState != HIGH) {
                    newFanState = HIGH;
                    addWebLog("6. Kipas dinyalakan karena amonia > 15 atau kelembaban > 80.");
                }
            } else if (amonia < 15 && kelembaban < 70) {
                if (newFanState != LOW) {
                    newFanState = LOW;
                    addWebLog("6. Kipas dimatikan karena amonia < 15, dan kelembaban < 70.");
                }          
            }
      } else {
          if (newHeaterState != LOW) {
              newHeaterState = LOW;
              addWebLog("Heater dimatikan karena suhu dalam rentang optimal.");
          } else if (amonia > 15 || kelembaban > 80) {
                if (newFanState != HIGH) {
                    newFanState = HIGH;
                    addWebLog("7. Kipas dinyalakan karena amonia > 15 atau kelembaban > 80.");
                }
            } else if (amonia < 15 && kelembaban < 70) {
                if (newFanState != LOW) {
                    newFanState = LOW;
                    addWebLog("7. Kipas dimatikan karena amonia < 15, dan kelembaban < 70.");
                }          
            }
      }
    if (newLampState != currentLampState) {
          currentLampState = newLampState;
          addWebLog("Lampu " + String(newLampState ? "dinyalakan" : "dimatikan") + ".");
      }
    if (newLampState != HIGH && currentHeaterState && (millis() - heaterStart > 5 * 60 * 1000)) {
        addWebLog("Heater telah menyala lebih dari 5 menit.");
        newLampState = HIGH;
        addWebLog("Lampu dinyalakan untuk membantu pemanasan.");
      }
    }
} else {
    newLampState = HIGH;
    if (newLampState != currentLampState) {
      digitalWrite(RELAY_LAMPU, newLampState);
      handleDeviceEvent("LAMP", newLampState);
      currentLampState = newLampState;
      addWebLog("Lampu dinyalakan (Umur <= 35).");
    }
    if (suhu < suhuOptimal.first) {
      if (newHeaterState != HIGH) {
          newHeaterState = HIGH;
          addWebLog("Heater dinyalakan karena suhu rendah.");
          if (amonia > 15 || kelembaban > 80) {
            if (newFanState != HIGH) {
                newFanState = HIGH;
                addWebLog("5. Kipas dinyalakan karena amonia > 15 atau kelembaban > 80.");
            }
        } else if (amonia < 15 && kelembaban < 70) {
            if (newFanState != LOW) {
                newFanState = LOW;
                addWebLog("5. Kipas dimatikan karena amonia < 15 dan kelembaban < 70.");
              }
            }
        }
      } else if (suhu > suhuOptimal.second) {
          if (newHeaterState != LOW) {
              newHeaterState = LOW;
              newFanState = HIGH;
              addWebLog("Heater dimatikan & Kipas dinyalakan karena suhu tinggi.");
          } else if(newHeaterState == LOW){
              if (newFanState != HIGH){
                newFanState = HIGH;
                addWebLog("Suhu tinggi heater dalam keadaan mati, kipas dinyalakan.");
              }
            }
            else if (amonia > 15 || kelembaban > 80) {
                if (newFanState != HIGH) {
                    newFanState = HIGH;
                    addWebLog("6. Kipas dinyalakan karena amonia > 15 atau kelembaban > 80.");
                }
            } else if (amonia < 15 && kelembaban < 70) {
                if (newFanState != LOW) {
                    newFanState = LOW;
                    addWebLog("6. Kipas dimatikan karena amonia < 15, dan kelembaban < 70.");
                }          
            }
      } else {
          if (newHeaterState != LOW) {
              newHeaterState = LOW;
              addWebLog("Heater dimatikan karena suhu dalam rentang optimal.");
          } else if (amonia > 15 || kelembaban > 80) {
                if (newFanState != HIGH) {
                    newFanState = HIGH;
                    addWebLog("7. Kipas dinyalakan karena amonia > 15 atau kelembaban > 80.");
                }
            } else if (amonia < 15 && kelembaban < 70) {
                if (newFanState != LOW) {
                    newFanState = LOW;
                    addWebLog("7. Kipas dimatikan karena amonia < 15, dan kelembaban < 70.");
                }          
            }
      }
    if (newLampState != currentLampState) {
          currentLampState = newLampState;
          addWebLog("Lampu " + String(newLampState ? "dinyalakan" : "dimatikan") + ".");
      }
    if (newLampState != HIGH && currentHeaterState && (millis() - heaterStart > 5 * 60 * 1000)) {
        addWebLog("Heater telah menyala lebih dari 5 menit.");
        newLampState = HIGH;
        addWebLog("Lampu dinyalakan untuk membantu pemanasan.");
    }
}

if (newHeaterState != currentHeaterState) {
    digitalWrite(RELAY_HEATER, newHeaterState);
    handleDeviceEvent("HEATER", newHeaterState);
    currentHeaterState = newHeaterState;
    if (newHeaterState == HIGH) {
        heaterStart = millis();
        addWebLog("Heater dinyalakan.");
    } else {
        heaterStop = millis();
        heaterDuration = heaterStop - heaterStart;
        addWebLog("Heater dimatikan. Durasi: " + formatDuration(heaterDuration));
    }
}

if (newFanState != currentFanState) {
    digitalWrite(RELAY_KIPAS, newFanState);
    handleDeviceEvent("FAN", newFanState);
    currentFanState = newFanState;
    if (newFanState == HIGH) {
        fanStart = millis();
        addWebLog("Kipas dinyalakan.");
    } else {
        fanStop = millis();
        fanDuration = fanStop - fanStart;
        addWebLog("Kipas dimatikan. Durasi: " + formatDuration(fanDuration));
    }
}

if (newLampState != currentLampState) {
    digitalWrite(RELAY_LAMPU, newLampState);
    handleDeviceEvent("LAMP", newLampState);
    currentLampState = newLampState;
        if (newLampState == HIGH) {
            lampStart = millis();
            addWebLog("Lampu dinyalakan.");
        } else {
            lampStop = millis();
            lampDuration = lampStop - lampStart;
            addWebLog("Lampu dimatikan. Durasi: " + formatDuration(lampDuration));
        }
    }
}
void updateLCD() {
  static int lastPage = -1;
  static unsigned long lastUpdate = 0;
                                                               
  if(millis() - lastUpdate < 2000) return;
  lastUpdate = millis();

  int currentPage = tampilanLCD % 11;
  if(currentPage == lastPage) return;
  
  lcd.clear();
  delay(2);

  int umur = ((timeClient.getEpochTime()-waktuMasukKandang)/86400)+1;
  auto suhuOptimal = getOptimalTemperature(umur);
  
  switch(currentPage) {
    case 0:
      lcd.setCursor(0, 0);
      lcd.print("Tanggal:");
      lcd.setCursor(0, 1);
      lcd.print(getFormattedDate(timeClient.getEpochTime()));
      break;
    case 1:
      lcd.setCursor(0, 0);
      lcd.print("Jam:");
      lcd.setCursor(0, 1);
      lcd.print(timeClient.getFormattedTime().substring(0,8));
      break;
    case 2:
      lcd.setCursor(0, 0);
      lcd.print("Masuk Kandang:");
      lcd.setCursor(0, 1);
      lcd.print(getFormattedDate(waktuMasukKandang));
      break;
    case 3:
      lcd.setCursor(0, 0);
      lcd.print("Umur:");
      lcd.setCursor(0, 1);
      lcd.print(String(umur)+" hari");
      break;
    case 4:
      lcd.setCursor(0, 0);
      lcd.print("Suhu : " + String(suhu,2) + "\xDF" "C");
      lcd.setCursor(0, 1);
      lcd.print("Range: " + String(suhuOptimal.first,0) + "-" + String(suhuOptimal.second,0) + "\xDF" "C");
      break;
    case 5:
      lcd.setCursor(0, 0);
      lcd.print("Kelemb: " + String(kelembaban,0) + "%");
      lcd.setCursor(0, 1);
      lcd.print("tgt : 80 %");
      break;
    case 6:
      lcd.setCursor(0, 0);
      lcd.print("Amonia:");
      lcd.setCursor(0, 1);
      lcd.print(String(amonia,2) + " ppm");
      break;
    case 7:
      lcd.setCursor(0, 0);
      lcd.print("Lampu:");
      lcd.setCursor(0, 1);
      lcd.print(digitalRead(RELAY_LAMPU)?"ON":"OFF");
      break;
    case 8:
      lcd.setCursor(0, 0);
      lcd.print("Kipas:");
      lcd.setCursor(0, 1);
      lcd.print(digitalRead(RELAY_KIPAS)?"ON":"OFF");
      break;
      case 9:
      lcd.setCursor(0, 0);
      lcd.print("Heater:");
      lcd.setCursor(0, 1);
      lcd.print(digitalRead(RELAY_HEATER) ? "ON" : "OFF");
      break;
    case 10:
      lcd.setCursor(0, 0);
      lcd.print("IP:");
      lcd.setCursor(0, 1);
      lcd.print(WiFi.localIP().toString());
      break;
  }

  lastPage = currentPage;
  tampilanLCD++;
}

void maintainWiFi() {
  static unsigned long lastCheck = 0;
  if (millis() - lastCheck < 30000) return;
  if (WiFi.status() != WL_CONNECTED) {
    addWebLog("WiFi is not connected. Reconnecting...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    delay(5000);
    return;
  }
  lastCheck = millis();
}

void updateTime() {
  static unsigned long lastUpdate = 0;
  if(millis()-lastUpdate <60000) return;
  timeClient.update();
  lastUpdate = millis();
}

void addWebLog(String message) {
    String timestamp = getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime();
    String logEntry = "<p><span class='timestamp'>[" + timestamp + "]</span> " + message + "</p>";
    if (webLogs.length() + logEntry.length() > 2048) { 
        webLogs = webLogs.substring(logEntry.length());
    }
    webLogs += logEntry;
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) delay(500);

  timeClient.begin();
  timeClient.forceUpdate();
  dht.begin();
  lcd.init();
  lcd.backlight();

  pinMode(RELAY_KIPAS, OUTPUT);
  pinMode(RELAY_LAMPU, OUTPUT);
  pinMode(RELAY_HEATER, OUTPUT);

  digitalWrite(RELAY_LAMPU, LOW);
  digitalWrite(RELAY_KIPAS, LOW);
  digitalWrite(RELAY_HEATER, LOW);

  GSheet.begin(CLIENT_EMAIL, PROJECT_ID, PRIVATE_KEY);

  server.on("/", [=]() {
    timeClient.update();
    int umur = ((timeClient.getEpochTime() - waktuMasukKandang) / 86400) + 1;

    String html = "<!DOCTYPE html><html><head>";
    html += "<meta charset='UTF-8'>";
    html += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
    html += "<title>Monitoring Kandang Ayam</title>";
    html += "<style>";
    html += "body { font-family: Arial, sans-serif; margin: 0; padding: 0; display: flex; flex-direction: column; height: 100vh; }";
    html += ".header { background-color: #4CAF50; color: white; padding: 10px; text-align: center; }";
    html += ".container { display: flex; flex: 1; overflow: hidden; }";
    html += ".panel { flex: 1; padding: 15px; overflow-y: auto; box-sizing: border-box; }";
    html += ".sensor-panel { background-color: #f9f9f9; border-right: 1px solid #ddd; }";
    html += ".log-panel { background-color: #f0f0f0; }";
    html += "h2 { color: #333; border-bottom: 1px solid #ddd; padding-bottom: 5px; }";
    html += ".sensor-value { margin-bottom: 15px; padding: 10px; background: white; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }";
    html += ".log-entry { margin-bottom: 8px; padding: 5px; background: white; border-radius: 3px; font-family: monospace; font-size: 14px; }";
    html += ".timestamp { color: #666; font-weight: bold; }";
    html += ".range-value { color: #007bff; font-weight: bold; }";
    html += "</style></head><body>";

    html += "<div class='header'><h1>Monitoring Kandang Ayam</h1></div>";
    html += "<div class='container'>";

    html += "<div class='panel sensor-panel'>";
    html += "<h2>Data Sensor</h2>";

    html += "<div class='sensor-value'>";
    html += "<h3>Status Sistem</h3>";
    html += "<p>Waktu: " + getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime() + "</p>";
    html += "<p>Umur Ayam: " + String(umur) + " hari</p>";
    html += "<p>Tanggal Masuk Kandang: " + getFormattedDate(waktuMasukKandang)+"</p>";
    html += "<p>Range Suhu Optimal: <span class='range-value'>" + String(getOptimalTemperature(umur).first, 1) + "°C - " + String(getOptimalTemperature(umur).second, 1) + "°C</span></p>";
    html += "</div>";

    html += "<div class='sensor-value'>";
    html += "<h3>Suhu & Kelembaban</h3>";
    html += "<p>Suhu: " + String(suhu, 1) + " °C</p>";
    html += "<p>Kelembaban: " + String(kelembaban, 0) + "%</p>";
    html += "<p>Amonia: " + String(amonia, 1) + " ppm</p>";
    html += "</div>";

    html += "<div class='sensor-value'>";
    html += "<h3>Status Perangkat</h3>";
    html += "<p>Lampu: " + String(digitalRead(RELAY_LAMPU) ? "ON" : "OFF") + "</p>";
    html += "<p>Kipas: " + String(digitalRead(RELAY_KIPAS) ? "ON" : "OFF") + "</p>";
    html += "<p>Heater: " + String(digitalRead(RELAY_HEATER) ? "ON" : "OFF") + "</p>";
    html += "</div>";

    html += "</div>";

    html += "<div class='panel log-panel'>";
    html += "<h2>Event Log</h2>";
    html += "<div>";
    html += webLogs;
    html += "</div>";
    html += "</div>";

    html += "</div>";
    html += "</body></html>";

    server.send(200, "text/html", html);
  });
  server.begin();
  addWebLog("Sistem diinisialisasi");
  addWebLog("IP Address: " + WiFi.localIP().toString());
}

void loop() {
  maintainWiFi();
  updateTime();
  server.handleClient();
  yield();

  if (bacaSensor()) {
    kontrolSuhu();
  }
  static unsigned long lastSend = 0;
  if (millis() - lastSend >= SEND_INTERVAL) {
    if (!GSheet.ready()) {
        addWebLog("Google Sheets API is not ready. Check credentials or API configuration.");
        return;
    }

    FirebaseJson sensorResponse;
    FirebaseJson sensorValueRange;

    sensorValueRange.add("majorDimension", "COLUMNS");
    sensorValueRange.set("values/[0]/[0]", getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime());
    sensorValueRange.set("values/[1]/[0]", ((timeClient.getEpochTime() - waktuMasukKandang) / 86400) + 1);
    sensorValueRange.set("values/[2]/[0]", String(suhu, 2).toFloat());
    sensorValueRange.set("values/[3]/[0]", String(kelembaban, 2).toFloat());
    sensorValueRange.set("values/[4]/[0]", String(amonia, 2).toFloat());
    sensorValueRange.set("values/[5]/[0]", digitalRead(RELAY_LAMPU) ? "ON" : "OFF");
    sensorValueRange.set("values/[6]/[0]", digitalRead(RELAY_KIPAS) ? "ON" : "OFF");
    sensorValueRange.set("values/[7]/[0]", digitalRead(RELAY_HEATER) ? "ON" : "OFF");
    sensorValueRange.set("values/[8]/[0]", WiFi.localIP().toString());

    if (GSheet.values.append(&sensorResponse, spreadsheetId, String(sensorSheet + "!A1").c_str(), &sensorValueRange)) {
        addWebLog("Data berhasil dikirim ke Google Sheets.");
    } else {
        addWebLog("Gagal mengirim data ke Google Sheets. Periksa koneksi atau konfigurasi API.");
    }
    sensorResponse.clear();
    sensorValueRange.clear();

    lastSend = millis();
    yield();
  }

  static unsigned long lastLCD = 0;
  if (millis() - lastLCD >= 2000) {
    updateLCD();
    lastLCD = millis();
    yield();
  }

  static unsigned long ventilationStart = 0;
  static bool isVentilating = false;
  if (millis() - lastVentilation > VENTILATION_INTERVAL) {
    digitalWrite(RELAY_KIPAS, HIGH);
    lastVentilation = millis();
    ventilationStart = millis();
    isVentilating = true;
    addWebLog("Kipas dinyalakan untuk ventilasi.");
    yield();
  }

  if (isVentilating && (millis() - ventilationStart >= VENTILATION_DURATION)) {
    digitalWrite(RELAY_KIPAS, LOW);
    isVentilating = false;
    addWebLog("Kipas dimatikan, ventilasi selesai.");
  }

  static unsigned long lastLogSend = 0;
  if (millis() - lastLogSend >= SEND_INTERVAL) {
    if (!GSheet.ready()) {
        addWebLog("Google Sheets API is not ready. Check credentials or API configuration.");
        return;
    }
    if (lastLampState != currentLampState || lastFanState != currentFanState || lastHeaterState != currentHeaterState) {
        FirebaseJson logResponse;
        FirebaseJson logValueRange;

        logValueRange.add("majorDimension", "ROWS");
        logValueRange.set("values/[0]/[0]", getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime());
        logValueRange.set("values/[0]/[1]", "Lampu");
        logValueRange.set("values/[0]/[2]", currentLampState ? "ON" : "OFF");
        logValueRange.set("values/[0]/[3]", formatDuration(lampDuration));
        logValueRange.set("values/[1]/[0]", getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime());
        logValueRange.set("values/[1]/[1]", "Kipas");
        logValueRange.set("values/[1]/[2]", currentFanState ? "ON" : "OFF");
        logValueRange.set("values/[1]/[3]", formatDuration(fanDuration));
        logValueRange.set("values/[2]/[0]", getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime());
        logValueRange.set("values/[2]/[1]", "Heater");
        logValueRange.set("values/[2]/[2]", currentHeaterState ? "ON" : "OFF");
        logValueRange.set("values/[2]/[3]", formatDuration(heaterDuration));

        if (GSheet.values.append(&logResponse, spreadsheetId, String("Logs!A1").c_str(), &logValueRange)) {
            addWebLog("Log perubahan status berhasil dikirim ke Google Sheets.");
        } else {
            addWebLog("Gagal mengirim log perubahan status ke Google Sheets. Periksa koneksi atau konfigurasi API.");
        }
        lastLampState = currentLampState;
        lastFanState = currentFanState;
        lastHeaterState = currentHeaterState;
        lastLogSend = millis();
        yield();
    }
  }
}
