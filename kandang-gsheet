#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP_Google_Sheet_Client.h>
#include <ArduinoJson.h>

#define DHTPIN 2
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
#define RELAY_KIPAS 14
#define RELAY_LAMPU 12
#define RELAY_HEATER 13
#define MQ135_PIN A0
#define MAX_LOGS 50
#define SENSOR_INTERVAL 10000
#define SEND_INTERVAL 300000
#define VENTILATION_INTERVAL 3600000
#define VENTILATION_DURATION 300000

LiquidCrystal_I2C lcd(0x27, 16, 2);
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 7 * 3600);
ESP8266WebServer server(80);

const char* ssid = "SSID";
const char* password = "Password";
const unsigned long waktuMasukKandang = 1742428800;

struct DeviceLog {
  String type;
  String start;
  String end;
  unsigned long duration;
};
DeviceLog logBuffer[MAX_LOGS];
int logIndex = 0;

struct Device {
  bool state;
  unsigned long totalRuntime;
};

Device lampu = {false, 0};
Device kipas = {false, 0};
Device heater = {false, 0};

float suhu, kelembaban, amonia;
unsigned long lampuStart = 0, kipasStart = 0, lastVentilation = 0;
int tampilanLCD = 0;

const char* spreadsheetId = "1JmoSOS-vDcWTocTzMMD03yGqywlKXwkG2AljmN3zj4k";
const String logSheet = "Logs";
const String sensorSheet = "Sensor";

#define PROJECT_ID "solid-heaven-365404"
#define CLIENT_EMAIL "gsheet@solid-heaven-365404.iam.gserviceaccount.com"
const char PRIVATE_KEY[] PROGMEM = "-----BEGIN PRIVATE KEY-----";

String webLogs = "";

std::pair<float, float> getOptimalTemperature(int umur) {
  static const std::pair<float, float> tempTable[] = {{32.0,34.0},{30.0,32.0},{28.0,30.0},{26.0,28.0},{26.0,31.0}};
  return tempTable[(umur <= 7) ? 0 : (umur <= 14) ? 1 : (umur <= 21) ? 2 : (umur <= 28) ? 3 : 4];
}

std::pair<float, float> getOptimalHumidity(int umur) {
  if(umur <= 7) return {60.0, 70.0};
  else if(umur <= 14) return {55.0, 65.0};
  else return {50.0, 60.0};
}

String getFormattedDate(unsigned long epochTime) {
  time_t rawTime = epochTime;
  struct tm *timeInfo = localtime(&rawTime);
  const char* bulan[] = {"Jan","Feb","Mar","Apr","Mei","Jun","Jul","Ags","Sep","Okt","Nov","Des"};
  return String(timeInfo->tm_mday) + " " + bulan[timeInfo->tm_mon] + " " + String(timeInfo->tm_year + 1900);
}

float getAmoniaPPM() {
  return analogRead(MQ135_PIN) * (3.3/1024.0) * 10.0;
}

String formatDuration(unsigned long ms) {
  unsigned long secs = ms/1000;
  char buf[9];
  snprintf(buf, sizeof(buf), "%02lu:%02lu:%02lu", secs/3600, (secs%3600)/60, secs%60);
  return String(buf);
}

void handleDeviceEvent(String type, bool state) {
  noInterrupts();
  if (logIndex >= MAX_LOGS) {
    memmove(&logBuffer[0], &logBuffer[1], sizeof(DeviceLog) * (MAX_LOGS - 1));
    logIndex = MAX_LOGS - 1;
  }

  if (state) {
    logBuffer[logIndex] = {type, timeClient.getFormattedTime(), "", 0};
    if (type == "LAMP") lampuStart = millis();
    else if (type == "FAN") kipasStart = millis();
    addWebLog(type + " turned ON");
  } else {
    logBuffer[logIndex].end = timeClient.getFormattedTime();
    logBuffer[logIndex].duration = (type == "LAMP") ? (millis() - lampuStart) : (type == "FAN") ? (millis() - kipasStart) : 0;
    logIndex++;
    addWebLog(type + " turned OFF");
  }
  addWebLog("Current logIndex: " + String(logIndex));
  interrupts();
}

void sendLogs() {
  if (WiFi.status() == WL_CONNECTED && GSheet.ready() && logIndex > 0) {
    noInterrupts();
    FirebaseJson response;
    FirebaseJson valueRange;
    valueRange.add("majorDimension", "ROWS");

    int logsToSend = min(logIndex, 10);
    for (int i = 0; i < logsToSend; i++) {
      valueRange.set("values/[" + String(i) + "]/[0]", logBuffer[i].type);
      valueRange.set("values/[" + String(i) + "]/[1]", logBuffer[i].start);
      valueRange.set("values/[" + String(i) + "]/[2]", logBuffer[i].end);
      valueRange.set("values/[" + String(i) + "]/[3]", formatDuration(logBuffer[i].duration));
      yield();
    }

    bool success = GSheet.values.append(&response, spreadsheetId, String(logSheet + "!A1").c_str(), &valueRange);

    if (success) {
      addWebLog("Logs sent successfully.");
      memmove(&logBuffer[0], &logBuffer[logsToSend], sizeof(DeviceLog) * (logIndex - logsToSend));
      logIndex -= logsToSend;
      addWebLog("Updated logIndex: " + String(logIndex));
    } else {
      addWebLog("Failed to send logs.");
      addWebLog("Response: " + String(response.raw()));
    }
    interrupts();
  } else {
    if (WiFi.status() != WL_CONNECTED) addWebLog("WiFi is not connected.");
    if (!GSheet.ready()) addWebLog("Google Sheets API is not ready.");
    if (logIndex <= 0) addWebLog("No logs available to send.");
  }
}

bool bacaSensor() {
  static unsigned long lastRead = 0;
  if(millis()-lastRead >= SENSOR_INTERVAL) {
    suhu = dht.readTemperature();
    kelembaban = dht.readHumidity();
    amonia = getAmoniaPPM();
    lastRead = millis();
    return !isnan(suhu) && !isnan(kelembaban);
  }
  return false;
}

void kontrolSuhu() {
  static bool currentLampState = false;
  static bool currentFanState = false;
  static bool currentHeaterState = false;

  int umur = ((timeClient.getEpochTime() - waktuMasukKandang) / 86400) + 1;
  auto suhuOptimal = getOptimalTemperature(umur);
  auto kelembabanOptimal = getOptimalHumidity(umur);
  int jam = timeClient.getHours();
  int menit = timeClient.getMinutes();

  bool newLampState = currentLampState;
  bool newFanState = currentFanState;
  bool newHeaterState = currentHeaterState;

  if (amonia >= 15) {
    newHeaterState = LOW;
    newFanState = HIGH;
  } else if (kelembaban > kelembabanOptimal.second) {
    newHeaterState = LOW;
    newFanState = HIGH;
  } else if (umur > 35) {
    bool waktuMalam = (jam >= 17 || jam < 7);
    newHeaterState = waktuMalam ? (suhu < suhuOptimal.first ? HIGH : LOW) : LOW;
    newFanState = (suhu >= (suhuOptimal.second + 0.5)) ? HIGH : LOW;
  } else {
    newHeaterState = (suhu < suhuOptimal.first) ? HIGH : (suhu >= suhuOptimal.second) ? LOW : currentHeaterState;
    newFanState = (suhu >= (suhuOptimal.second + 0.5)) ? HIGH : LOW;
  }

  if (kelembaban < kelembabanOptimal.first) newFanState = LOW;

  bool waktuLampuNyala = (jam >= 17 || (jam < 7 || (jam == 6 && menit <= 30)));
  if (waktuLampuNyala || (currentHeaterState && (millis() - lampuStart > 5 * 60 * 1000))) {
    newLampState = HIGH;
  }
  if (suhu >= suhuOptimal.second) {
    newLampState = LOW;
  }

  if (newHeaterState != currentHeaterState) {
    digitalWrite(RELAY_HEATER, newHeaterState);
    handleDeviceEvent("HEATER", newHeaterState);
    currentHeaterState = newHeaterState;
    if (newHeaterState == HIGH) lampuStart = millis();
  }

  if (newFanState != currentFanState) {
    digitalWrite(RELAY_KIPAS, newFanState);
    handleDeviceEvent("FAN", newFanState);
    currentFanState = newFanState;
  }

  if (newLampState != currentLampState) {
    digitalWrite(RELAY_LAMPU, newLampState);
    handleDeviceEvent("LAMP", newLampState);
    currentLampState = newLampState;
  }
}

void updateLCD() {
  static int lastPage = -1;
  static unsigned long lastUpdate = 0;
  
  if(millis() - lastUpdate < 2000) return;
  lastUpdate = millis();

  int currentPage = tampilanLCD % 11;
  if(currentPage == lastPage) return;
  
  lcd.clear();
  delay(2);

  int umur = ((timeClient.getEpochTime()-waktuMasukKandang)/86400)+1;
  auto suhuOptimal = getOptimalTemperature(umur);
  auto kelembabanOptimal = getOptimalHumidity(umur);
  
  switch(currentPage) {
    case 0:
      lcd.setCursor(0, 0);
      lcd.print("Tanggal:");
      lcd.setCursor(0, 1);
      lcd.print(getFormattedDate(timeClient.getEpochTime()));
      break;
    case 1:
      lcd.setCursor(0, 0);
      lcd.print("Jam:");
      lcd.setCursor(0, 1);
      lcd.print(timeClient.getFormattedTime().substring(0,8));
      break;
    case 2:
      lcd.setCursor(0, 0);
      lcd.print("Masuk Kandang:");
      lcd.setCursor(0, 1);
      lcd.print(getFormattedDate(waktuMasukKandang));
      break;
    case 3:
      lcd.setCursor(0, 0);
      lcd.print("Umur:");
      lcd.setCursor(0, 1);
      lcd.print(String(umur)+" hari");
      break;
    case 4:
      lcd.setCursor(0, 0);
      lcd.print("Suhu : " + String(suhu,2) + "\xDF" "C");
      lcd.setCursor(0, 1);
      lcd.print("Range: " + String(suhuOptimal.first,0) + "-" + String(suhuOptimal.second,0) + "\xDF" "C");
      break;
    case 5:
      lcd.setCursor(0, 0);
      lcd.print("Kelemb: " + String(kelembaban,0) + "%");
      lcd.setCursor(0, 1);
      lcd.print("Range : " + String(kelembabanOptimal.first,0) + "-" + String(kelembabanOptimal.second,0) + "%");
      break;
    case 6:
      lcd.setCursor(0, 0);
      lcd.print("Amonia:");
      lcd.setCursor(0, 1);
      lcd.print(String(amonia,2) + " ppm");
      break;
    case 7:
      lcd.setCursor(0, 0);
      lcd.print("Lampu:");
      lcd.setCursor(0, 1);
      lcd.print(digitalRead(RELAY_LAMPU)?"ON":"OFF");
      break;
    case 8:
      lcd.setCursor(0, 0);
      lcd.print("Kipas:");
      lcd.setCursor(0, 1);
      lcd.print(digitalRead(RELAY_KIPAS)?"ON":"OFF");
      break;
      case 9:
      lcd.setCursor(0, 0);
      lcd.print("Heater:");
      lcd.setCursor(0, 1);
      lcd.print(digitalRead(RELAY_HEATER) ? "ON" : "OFF");
      break;
      case 10:
      lcd.setCursor(0, 0);
      lcd.print("Log Terakhir:");
      lcd.setCursor(0, 1);
      if (logIndex > 0) {
        int showIndex = logIndex - 1;
        lcd.print(logBuffer[showIndex].start.substring(0, 5) + "-" +
                  (logBuffer[showIndex].end != "" ? logBuffer[showIndex].end.substring(0, 5) : "ON"));
      } else {
        lcd.print("No logs");
      }
      break;
    case 11:
      lcd.setCursor(0, 0);
      lcd.print("IP:");
      lcd.setCursor(0, 1);
      lcd.print(WiFi.localIP().toString());
      break;
  }

  lastPage = currentPage;
  tampilanLCD++;
}

void maintainWiFi() {
  static unsigned long lastCheck = 0;
  if (millis() - lastCheck < 30000) return;
  if (WiFi.status() != WL_CONNECTED) {
    addWebLog("WiFi is not connected. Reconnecting...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    delay(5000);
    return;
  }
  lastCheck = millis();
}

void updateTime() {
  static unsigned long lastUpdate = 0;
  if(millis()-lastUpdate <60000) return;
  timeClient.update();
  lastUpdate = millis();
}

void addWebLog(String message) {
  String timestamp = getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime();
  webLogs += "<p><span class='timestamp'>[" + timestamp + "]</span> " + message + "</p>";
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) delay(500);

  timeClient.begin();
  timeClient.forceUpdate();
  dht.begin();
  lcd.init();
  lcd.backlight();

  pinMode(RELAY_KIPAS, OUTPUT);
  pinMode(RELAY_LAMPU, OUTPUT);
  pinMode(RELAY_HEATER, OUTPUT);

  digitalWrite(RELAY_LAMPU, LOW);
  digitalWrite(RELAY_KIPAS, LOW);
  digitalWrite(RELAY_HEATER, LOW);

  GSheet.begin(CLIENT_EMAIL, PROJECT_ID, PRIVATE_KEY);

  server.on("/", [=]() {
    timeClient.update();
    int umur = ((timeClient.getEpochTime() - waktuMasukKandang) / 86400) + 1;

    String html = "<!DOCTYPE html><html><head>";
    html += "<meta charset='UTF-8'>";
    html += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
    html += "<title>Monitoring Kandang Ayam</title>";
    html += "<style>";
    html += "body { font-family: Arial, sans-serif; margin: 0; padding: 0; display: flex; flex-direction: column; height: 100vh; }";
    html += ".header { background-color: #4CAF50; color: white; padding: 10px; text-align: center; }";
    html += ".container { display: flex; flex: 1; overflow: hidden; }";
    html += ".panel { flex: 1; padding: 15px; overflow-y: auto; box-sizing: border-box; }";
    html += ".sensor-panel { background-color: #f9f9f9; border-right: 1px solid #ddd; }";
    html += ".log-panel { background-color: #f0f0f0; }";
    html += "h2 { color: #333; border-bottom: 1px solid #ddd; padding-bottom: 5px; }";
    html += ".sensor-value { margin-bottom: 15px; padding: 10px; background: white; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }";
    html += ".log-entry { margin-bottom: 8px; padding: 5px; background: white; border-radius: 3px; font-family: monospace; font-size: 14px; }";
    html += ".timestamp { color: #666; font-weight: bold; }";
    html += ".range-value { color: #007bff; font-weight: bold; }";
    html += "</style></head><body>";

    html += "<div class='header'><h1>Monitoring Kandang Ayam</h1></div>";
    html += "<div class='container'>";

    html += "<div class='panel sensor-panel'>";
    html += "<h2>Data Sensor</h2>";

    html += "<div class='sensor-value'>";
    html += "<h3>Status Sistem</h3>";
    html += "<p>Waktu: " + getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime() + "</p>";
    html += "<p>Umur Ayam: " + String(umur) + " hari</p>";
    html += "<p>Range Suhu Optimal: <span class='range-value'>" + String(getOptimalTemperature(umur).first, 1) + "°C - " + String(getOptimalTemperature(umur).second, 1) + "°C</span></p>";
    html += "<p>Range Kelembaban Optimal: <span class='range-value'>" + String(getOptimalHumidity(umur).first, 1) + "% - " + String(getOptimalHumidity(umur).second, 1) + "%</span></p>";
    html += "</div>";

    html += "<div class='sensor-value'>";
    html += "<h3>Suhu & Kelembaban</h3>";
    html += "<p>Suhu: " + String(suhu, 1) + " °C</p>";
    html += "<p>Kelembaban: " + String(kelembaban, 0) + "%</p>";
    html += "<p>Amonia: " + String(amonia, 1) + " ppm</p>";
    html += "</div>";

    html += "<div class='sensor-value'>";
    html += "<h3>Status Perangkat</h3>";
    html += "<p>Lampu: " + String(digitalRead(RELAY_LAMPU) ? "ON" : "OFF") + "</p>";
    html += "<p>Kipas: " + String(digitalRead(RELAY_KIPAS) ? "ON" : "OFF") + "</p>";
    html += "<p>Heater: " + String(digitalRead(RELAY_HEATER) ? "ON" : "OFF") + "</p>";
    html += "</div>";

    html += "</div>";

    html += "<div class='panel log-panel'>";
    html += "<h2>Event Log</h2>";
    html += "<div>";
    html += webLogs;
    html += "</div>";
    html += "</div>";

    html += "</div>";
    html += "</body></html>";

    server.send(200, "text/html", html);
  });
  server.begin();
  addWebLog("Sistem diinisialisasi");
  addWebLog("IP Address: " + WiFi.localIP().toString());
}

void loop() {
  maintainWiFi();
  updateTime();
  server.handleClient();
  yield();
  
  if (bacaSensor()) kontrolSuhu();
  
  static unsigned long lastSend = 0;
  if (millis() - lastSend >= SEND_INTERVAL) {
    if (!GSheet.ready()) {
      addWebLog("Google Sheets API is not ready. Check credentials or API configuration.");
      return;
    }

    FirebaseJson sensorResponse;
    FirebaseJson sensorValueRange;

    sensorValueRange.add("majorDimension", "COLUMNS");
    sensorValueRange.set("values/[0]/[0]", getFormattedDate(timeClient.getEpochTime()) + " " + timeClient.getFormattedTime());
    sensorValueRange.set("values/[1]/[0]", ((timeClient.getEpochTime() - waktuMasukKandang) / 86400) + 1);
    sensorValueRange.set("values/[2]/[0]", String(suhu, 2).toFloat());
    sensorValueRange.set("values/[3]/[0]", String(kelembaban, 2).toFloat());
    sensorValueRange.set("values/[4]/[0]", String(amonia, 2).toFloat());
    sensorValueRange.set("values/[5]/[0]", digitalRead(RELAY_LAMPU) ? "ON" : "OFF");
    sensorValueRange.set("values/[6]/[0]", digitalRead(RELAY_KIPAS) ? "ON" : "OFF");
    sensorValueRange.set("values/[7]/[0]", digitalRead(RELAY_HEATER) ? "ON" : "OFF");
    sensorValueRange.set("values/[8]/[0]", WiFi.localIP().toString());
    sensorValueRange.set("values/[9]/[0]", formatDuration(lampu.totalRuntime));
    sensorValueRange.set("values/[10]/[0]", formatDuration(kipas.totalRuntime));

    GSheet.values.append(&sensorResponse, spreadsheetId, String(sensorSheet + "!A1").c_str(), &sensorValueRange);
    sendLogs();
    lastSend = millis();
    yield();
  }

  static unsigned long lastLCD = 0;
  if (millis() - lastLCD >= 2000) {
    updateLCD();
    lastLCD = millis();
    yield();
  }

  static unsigned long ventilationStart = 0;
  static bool isVentilating = false;
  if (millis() - lastVentilation > VENTILATION_INTERVAL) {
    digitalWrite(RELAY_KIPAS, HIGH);
    handleDeviceEvent("FAN", true);
    lastVentilation = millis();
    ventilationStart = millis();
    isVentilating = true;
    yield();
  }

  if (isVentilating && (millis() - ventilationStart >= VENTILATION_DURATION)) {
    digitalWrite(RELAY_KIPAS, LOW);
    handleDeviceEvent("FAN", false);
    isVentilating = false;
    yield();
  }
}
